// 提取时间: 2025-07-08 17:40:44
// 源目录: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\CreateArtistMessage.scala
// ============================================



// 类名: CreateArtistMessage


/**
 * CreateArtistMessage
desc: 创建新的艺术家信息
@param adminID: String (管理员ID)
@param adminToken: String (管理员令牌)
@param name: String (艺术家名称)
@param bio: String (艺术家简介)
@return (Option[String], String): (新建的艺术家ID, 错误信息)
 */

case class CreateArtistMessage(
  adminID: String,
  adminToken: String,
  name: String,
  bio: String
) extends API[(Option[String], String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\CreateBandMessage.scala
// ============================================



// 类名: CreateBandMessage


/**
 * CreateBandMessage
desc: 创建新的乐队信息
@param adminID: String (管理员ID)
@param adminToken: String (管理员令牌)
@param name: String (乐队名称)
@param members: List[String] (乐队成员ID列表)
@param bio: String (乐队简介)
@return (Option[String], String): (新建的乐队ID, 错误信息)
 */

case class CreateBandMessage(
  adminID: String,
  adminToken: String,
  name: String,
  members: List[String],
  bio: String
) extends API[(Option[String], String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\DeleteArtistMessage.scala
// ============================================



// 类名: DeleteArtistMessage


/**
 * DeleteArtistMessage
desc: 删除指定艺术家信息
@param adminID: String (管理员ID)
@param adminToken: String (管理员令牌)
@param artistID: String (艺术家ID)
@return (Boolean, String): (删除是否成功, 错误信息)
 */

case class DeleteArtistMessage(
  adminID: String,
  adminToken: String,
  artistID: String
) extends API[(Boolean, String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\DeleteBandMessage.scala
// ============================================



// 类名: DeleteBandMessage


/**
 * DeleteBandMessage
desc: 删除指定乐队信息
@param adminID: String (管理员ID，确保操作者身份为有权限用户。)
@param adminToken: String (管理员令牌，确保本次操作的有效性。)
@param bandID: String (待删除的乐队ID。)
@return (Boolean, String): (删除是否成功, 错误信息)
 */

case class DeleteBandMessage(
  adminID: String,
  adminToken: String,
  bandID: String
) extends API[(Boolean, String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\GetAllCreators.scala
// ============================================



// 类名: GetAllCreators


/**
 * GetAllCreators
desc: 获取所有创作者（包括艺术家和乐队）的列表。
@param userID: String (发起请求的用户的ID，用于身份验证。)
@param userToken: String (用户的认证令牌。)
@return (Option[List[CreatorID_Type]], String): (成功时包含所有创作者的CreatorID_Type列表，失败时为None；附带操作信息)
 */

case class GetAllCreators(
  userID: String,
  userToken: String
) extends API[(Option[List[CreatorID_Type]], String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\GetArtistByID.scala
// ============================================



// 类名: GetArtistByID


/**
 * GetArtistByID
desc: 根据提供的艺术家ID，获取完整的艺术家元数据。需要用户认证。
@param userID: String (发起请求的用户ID)
@param userToken: String (用户的认证令牌)
@param artistID: String (要查询的艺术家的唯一ID)
@return (Option[Artist], String): (成功时包含艺术家对象，失败时为None；附带操作信息)
 */

case class GetArtistByID(
  userID: String,
  userToken: String,
  artistID: String
) extends API[(Option[Artist], String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\GetBandByID.scala
// ============================================



// 类名: GetBandByID


/**
 * GetBandByID
desc: 根据提供的乐队ID，获取完整的乐队元数据。需要用户认证。
@param userID: String (发起请求的用户ID)
@param userToken: String (用户的认证令牌)
@param bandID: String (要查询的乐队的唯一ID)
@return (Option[Band], String): (成功时包含乐队对象，失败时为None；附带操作信息)
 */

case class GetBandByID(
  userID: String,
  userToken: String,
  bandID: String
) extends API[(Option[Band], String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\SearchAllBelongingBands.scala
// ============================================



// 类名: SearchAllBelongingBands


/**
 * SearchAllBelongingBands
desc: 根据提供的艺术家ID，查询该艺术家所属的所有乐队的ID列表。
这对于检查艺术家是否是任何乐队的成员等场景非常有用。

@param userID    发起请求的用户ID，用于认证和授权。
@param userToken 用户的认证令牌。
@param artistID  要查询的艺术家的唯一ID。

@return (Option[List[String]], String): (成功时包含乐队ID列表，如果艺术家不属于任何乐队则列表为空；失败时为None；附带操作信息)。
- 成功，找到乐队: (Some(List("band_id_1", "band_id_2")), "查询成功")
- 成功，未找到乐队: (Some(List()), "该艺术家不属于任何乐队")
- 失败 (如艺术家不存在): (None, "指定的艺术家ID不存在")
 */

case class SearchAllBelongingBands(
  userID: String,
  userToken: String,
  artistID: String
) extends API[(Option[List[String]], String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\SearchArtistByName.scala
// ============================================



// 类名: SearchArtistByName


/**
 * SearchArtistByName
desc: 根据提供的艺术家ID，获取完整的艺术家元数据。需要用户认证。
@param userID: String (发起请求的用户ID)
@param userToken: String (用户的认证令牌)
@param artistName: String (要模糊查询的艺术家名称)
@return (Option[List[String]], String): (成功时包含艺术家id列表，失败时为None；附带操作信息)
 */

case class SearchArtistByName(
  userID: String,
  userToken: String,
  artistName: String
) extends API[(Option[List[String]], String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\SearchBandByName.scala
// ============================================



// 类名: SearchBandByName


/**
 * SearchBandByName
desc: 根据提供的乐队ID，获取完整的乐队元数据。需要用户认证。
@param userID: String (发起请求的用户ID)
@param userToken: String (用户的认证令牌)
@param BandName: String (要模糊查询的乐队名称)
@return (Option[List[String]], String): (成功时包含乐队id列表，失败时为None；附带操作信息)
 */

case class SearchBandByName(
  userID: String,
  userToken: String,
  BandName: String
) extends API[(Option[List[String]], String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\UpdateArtistMessage.scala
// ============================================



// 类名: UpdateArtistMessage


/**
 * UpdateArtistMessage
desc: 更新现有艺术家信息
@param userID: String (当前用户的ID，用于操作验证)
@param userToken: String (用户令牌，用于验证用户身份和权限)
@param artistID: String (需要更新的艺术家唯一标识)
@param name: Option[String] (新艺术家名称，可选)
@param bio: Option[String] (新艺术家简介，可选)
@return (Boolean, String): (更新是否成功, 错误信息)
 */

case class UpdateArtistMessage(
  userID: String,
  userToken: String,
  artistID: String,
  name: Option[String] = None,
  bio: Option[String] = None
) extends API[(Boolean, String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\CreatorService\UpdateBandMessage.scala
// ============================================



// 类名: UpdateBandMessage


/**
 * UpdateBandMessage
desc: 更新现有乐队的信息接口
@param userID: String (用户ID，用于标识请求用户)
@param userToken: String (用户令牌，用于校验用户身份)
@param bandID: String (乐队的唯一标识ID)
@param name: Option[String] (乐队的新名称（可选）)
@param members: List[String] (乐队成员ID列表（可选）)
@param bio: Option[String] (乐队新的简介信息（可选）)
@return (Boolean, String): (更新是否成功, 错误信息)
 */

case class UpdateBandMessage(
  userID: String,
  userToken: String,
  bandID: String,
  name: Option[String] = None,
  members: Option[List[String]] = None,
  bio: Option[String] = None
) extends API[(Boolean, String)](CreatorServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\CreateNewGenre.scala
// ============================================



// 类名: CreateNewGenre


/**
 * CreateNewGenre
desc: 创建一个新的曲风记录。
@param adminID: String (管理员ID，用于验证权限。)
@param adminToken: String (管理员的认证令牌。)
@param name: String (曲风名称。)
@param description: String (曲风的描述信息。)
@return (Option[String], String): (生成的新曲风ID, 错误信息)
 */

case class CreateNewGenre(
  adminID: String,
  adminToken: String,
  name: String,
  description: String
) extends API[(Option[String], String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\DeleteGenre.scala
// ============================================



// 类名: DeleteGenre


/**
 * DeleteGenre
desc: 删除曲风信息，仅限管理员操作
@param adminID: String (管理员的唯一标识符)
@param adminToken: String (管理员身份验证令牌，用于权限校验)
@param genreID: String (要删除的曲风ID)
@return (Boolean, String): (删除是否成功, 错误信息)
 */

case class DeleteGenre(
  adminID: String,
  adminToken: String,
  genreID: String
) extends API[(Boolean, String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\DeleteSong.scala
// ============================================



// 类名: DeleteSong


/**
 * DeleteSong
desc: 用于管理员删除指定歌曲信息。
@param adminID: String (管理员ID，用于进行身份验证。)
@param adminToken: String (管理员验证令牌，用于鉴权。)
@param songID: String (待删除的歌曲ID。)
@return (Boolean, String): (删除是否成功, 错误信息)
 */

case class DeleteSong(
  adminID: String,
  adminToken: String,
  songID: String
) extends API[(Boolean, String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\FilterSongsByEntity.scala
// ============================================



// 类名: FilterSongsByEntity


/**
 * FilterSongsByEntity
desc: 按照实体（artist/band）或曲风筛选歌曲。

@param userID: String (用户的唯一标识。)
@param userToken: String (用于验证用户身份的令牌。)
@param creator: Option[CreatorID_Type] (可选，表示筛选 creator。)
@param genres: Option[String] (曲风ID，可选，表示筛选曲风。)
@return (Option[List[String]], String): (符合条件的歌曲ID列表, 错误信息)
 */

case class FilterSongsByEntity(
  userID: String,
                                userToken: String,
                                creator: Option[CreatorID_Type] = None,
                                genres: Option[String] = None
) extends API[(Option[List[String]], String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\GetSongByID.scala
// ============================================



// 类名: GetSongByID


/**
 * GetSongByID
desc: 根据提供的歌曲ID，获取完整的歌曲元数据。需要用户认证。
@param userID: String (发起请求的用户ID)
@param userToken: String (用户的认证令牌)
@param songID: String (要查询的歌曲的唯一ID)
@return (Option[Song], String): (成功时包含歌曲对象，失败时为None；附带操作信息)
 */

case class GetSongByID(
  userID: String,
  userToken: String,
  songID: String
) extends API[(Option[Song], String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\GetSongList.scala
// ============================================



// 类名: GetSongList


/**
 * GetSongList
desc: 获取所有歌曲。需要用户认证。
@param userID: String (发起请求的用户ID)
@param userToken: String (用户的认证令牌)
@return (Option[List[String]], String): (成功时包含歌曲ID，失败时为None；附带操作信息)
 */

case class GetSongList(
  userID: String,
  userToken: String
) extends API[(Option[List[String]], String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\GetSongProfile.scala
// ============================================



// 类名: GetSongProfile


/**
 * GetSongProfile
desc: 根据提供的歌曲ID，获取歌曲 profile
@param userID: String (发起请求的用户ID)
@param userToken: String (用户的认证令牌)
@param songID: String (要查询的歌曲的唯一ID)
@return (Option[Profile], String): (成功时包含歌曲信息，失败时为None；附带操作信息)
 */

case class GetSongProfile(
  userID: String,
  userToken: String,
  songID: String
) extends API[(Option[Profile], String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\SearchSongsByName.scala
// ============================================



// 类名: SearchSongsByName


/**
 * SearchSongsByName
desc: 根据歌曲名称搜索匹配的歌曲列表，用于歌曲检索功能。
@param userID: String (当前用户的ID，用于权限和用户会话的匹配验证。)
@param userToken: String (当前用户的令牌，用于身份认证和权限验证。)
@param keywords: String (用户输入的模糊搜索关键词，用于匹配歌曲名称。)
@return (Option[List[String]], String): (匹配到的歌曲ID列表, 错误信息)
 */

case class SearchSongsByName(
  userID: String,
  userToken: String,
  keywords: String
) extends API[(Option[List[String]], String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\UpdateSongMetadata.scala
// ============================================



// 类名: UpdateSongMetadata


/**
 * UpdateSongMetadata
desc: 更新已有的歌曲信息，包括元数据和相关引用信息。
@param userID: String (进行更新操作的用户ID)
@param userToken: String (用于验证用户的访问令牌)
@param songID: String (需要更新的歌曲ID)
@param name: Option[String] (需要更新的歌曲名称)
@param releaseTime: Option[DateTime] (需要更新的歌曲发布时间)
@param creators: List[CreatorID_Type] (需要更新的创作者列表)
@param performers: List[String] (需要更新的演唱者列表)
@param lyricists: List[String] (需要更新的作词者列表)
@param composers: List[String] (需要更新的作曲者列表)
@param arrangers: List[String] (需要更新的编曲者列表)
@param instrumentalists: List[String] (需要更新的演奏者列表)
@param genres: List[String] (需要更新的歌曲曲风列表)
@return (Boolean, String): (更新是否成功, 错误信息)
 */

case class UpdateSongMetadata(
  userID: String,
                               userToken: String,
                               songID: String,
                               name: Option[String] = None,
                               releaseTime: Option[DateTime] = None,
                               creators: Option[List[CreatorID_Type]] = None,
                               performers: Option[List[String]] = None,
                               lyricists: Option[List[String]] = None,
                               composers: Option[List[String]] = None,
                               arrangers: Option[List[String]] = None,
                               instrumentalists: Option[List[String]] = None,
                               genres: Option[List[String]] = None
) extends API[(Boolean, String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\UploadNewSong.scala
// ============================================



// 类名: UploadNewSong


/**
 * UploadNewSong
desc: 上传新歌曲的接口。
@param userID: String (用户ID，用于标识当前操作用户。)
@param userToken: String (用户令牌，用于验证用户身份。)
@param name: String (歌曲名称。)
@param releaseTime: DateTime (歌曲的发布日期。)
@param creators: List[CreatorID_Type] (创作者ID列表。)
@param performers: List[String] (演唱者ID列表。)
@param lyricists: List[String] (作词者ID列表。)
@param arrangers: List[String] (编曲者ID列表。)
@param instrumentalists: List[String] (演奏者ID列表。)
@param genres: List[String] (曲风ID列表，用于标识歌曲的归类。)
@param composers: List[String] (作曲者ID列表。)
@return (Option[String], String): (生成的歌曲ID, 错误信息)
 */

case class UploadNewSong(
  userID: String,
  userToken: String,
  name: String,
  releaseTime: DateTime,
  creators: List[CreatorID_Type],
  performers: List[String],
  lyricists: List[String],
  arrangers: List[String],
  instrumentalists: List[String],
  genres: List[String],
  composers: List[String]
) extends API[(Option[String], String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\MusicService\ValidateSongOwnership.scala
// ============================================



// 类名: ValidateSongOwnership


/**
 * ValidateSongOwnership
desc: 验证用户是否对指定歌曲拥有管理权限
@param userID: String (用户ID，用于验证用户身份和权限)
@param userToken: String (用户令牌，用于验证用户身份有效性)
@param songID: String (歌曲ID，用于标识需要验证的歌曲)
@return (Boolean, String): (用户是否拥有管理权限, 错误信息)
 */

case class ValidateSongOwnership(
  userID: String,
  userToken: String,
  songID: String
) extends API[(Boolean, String)](MusicServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\OrganizeService\UserLogoutMessage.scala
// ============================================



// 类名: UserLogoutMessage


/**
 * UserLogoutMessage
desc: 用户传入自身ID和当前token，完成登出操作
@param userID: String (用户ID，标识用户身份)
@param userToken: String (用户令牌，用于验证登录的状态和身份)
@return (Boolean, String): (登出是否成功, 错误信息)
 */

case class UserLogoutMessage(
  userID: String,
  userToken: String
) extends API[(Boolean, String)](OrganizeServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\OrganizeService\UserRegisterMessage.scala
// ============================================



// 类名: UserRegisterMessage


/**
 * UserRegisterMessage
desc: 用户注册操作接口，用户通过用户名和密码完成注册，并分配唯一ID
@param userName: String (用户名，用于标识唯一用户账户)
@param password: String (用户明文密码，用于账户安全验证，需加密存储)
@return (Option[String], String): (成功时的用户ID或None表示失败；失败时的报错信息)
 */

case class UserRegisterMessage(
  userName: String,
  password: String
) extends API[(Option[String], String)](OrganizeServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\OrganizeService\validateAdminMapping.scala
// ============================================



// 类名: validateAdminMapping


/**
 * validateAdminMapping
desc: 统一验证管理员的有效性、映射关系和权限，用于所有涉及管理员操作的功能作为前置验证
@param adminID: String (管理员ID)
@param adminToken: String (管理员令牌)
@return (Boolean, String): (管理员是否通过验证, 错误信息)
 */

case class validateAdminMapping(
  adminID: String,
  adminToken: String
) extends API[(Boolean, String)](OrganizeServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\OrganizeService\validateUserMapping.scala
// ============================================



// 类名: validateUserMapping


/**
 * validateUserMapping
desc: 统一验证用户的有效性和映射关系
@param userID: String (用户ID，用于标识当前进行验权操作的用户)
@param userToken: String (用户令牌，用于验证用户登录及验证有效性)
@return (Boolean, String): (用户ID与令牌是否匹配且有效, 错误信息)
 */

case class validateUserMapping(
  userID: String,
  userToken: String
) extends API[(Boolean, String)](OrganizeServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetAverageRating.scala
// ============================================



// 类名: GetAverageRating


/**
 * GetAverageRating
desc: 查询一首歌的平均评分。
该操作会返回一个包含平均评分和评分数量的元组。如果没有评分记录，则返回平均评分为0，评分数量为0。
@param userID: String (评分用户的ID。)
@param userToken: String (用户的认证令牌，用于验证身份。)
@param songID: String (被评分的歌曲的ID。)
@return ((Double,Int), String): (操作是否成功, 错误信息)
 */

case class GetAverageRating(
  userID: String,
  userToken: String,
  songID: String,
) extends API[((Double,Int), String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetCreatorCreationTendency.scala
// ============================================



// 类名: GetCreatorCreationTendency


/**
 * GetCreatorCreationTendency
desc: 获取指定创作者（艺术家或乐队）的创作倾向。通过 `creatorType` 参数区分目标是艺术家（"Artist"）还是乐队（"Band"）。该倾向表现为一个关于音乐曲风的归一化向量，其中每一项是 (GenreID, 倾向度) 的二元组，所有倾向度相加为1.0。
@param userID: String (发起请求的用户的ID，用于身份验证。)
@param userToken: String (用户的认证令牌。)
@param creator: CreatorID_Type (创作者的智能ID对象，封装了ID和类型。)
@return (Option[Profile], String): (创作者的创作倾向向量, 错误信息)
 */

case class GetCreatorCreationTendency(
  userID: String,
  userToken: String,
  creator: CreatorID_Type
) extends API[(Option[Profile], String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetCreatorGenreStrength.scala
// ============================================



// 类名: GetCreatorGenreStrength


/**
 * GetCreatorGenreStrength
desc: 获取指定创作者（艺术家或乐队）在各个曲风下的创作实力。实力值是一个非归一化的正实数，由该创作者在该曲风下所有歌曲的热度综合计算得出。
@param userID: String (发起请求的用户的ID，用于身份验证。)
@param userToken: String (用户的认证令牌。)
@param creator: CreatorID_Type (创作者的智能ID对象，封装了ID和类型。)
@return (Option[Profile], String): (创作者的曲风实力向量, 错误信息)
 */

case class GetCreatorGenreStrength(
  userID: String,
  userToken: String,
  creator: CreatorID_Type // 使用新的 CreatorID_Type
) extends API[(Option[Profile], String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetNextSongRecommendation.scala
// ============================================



// 类名: GetNextSongRecommendation


/**
 * GetNextSongRecommendation
desc: 结合用户长期收听画像和当前正在播放的歌曲上下文，为用户推荐下一首歌曲。
@param userID: String (需要获取推荐的用户的ID。)
@param userToken: String (用户的认证令牌，用于验证身份。)
@param currentSongID: String (用户当前正在播放的歌曲的ID，作为推荐的即时上下文。)
@return (Option[String], String): (推荐的下一首歌曲的ID; 如果没有合适的推荐则为None, 错误信息)
 */

case class GetNextSongRecommendation(
  userID: String,
  userToken: String,
  currentSongID: String
) extends API[(Option[String], String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetSimilarCreators.scala
// ============================================



// 类名: GetSimilarCreators


/**
 * GetSimilarCreators
desc: 获取与指定创作者（艺术家或乐队）曲风相近的其他创作者ID列表。相似度由后端基于创作倾向等统计数据进行计算。
@param userID: String (发起请求的用户的ID，用于身份验证。)
@param userToken: String (用户的认证令牌。)
@param creatorID: String (作为查询基准的目标创作者（艺术家或乐队）的ID。)
@param creatorType: String (目标创作者的类型。其值为 "Artist" 或 "Band"。)
@param limit: Int (希望返回的相似创作者的最大数量。)
@return (Option[List[(String,String)]], String): (相似创作者的(ID,类型)列表; 如果找不到源创作者或无相似者则为None, 错误信息)
 */

case class GetSimilarCreators(
  userID: String,
  userToken: String,
  creatorID: String,
  creatorType: String,
  limit: Int
) extends API[(Option[List[(String,String)]], String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetSimilarSongs.scala
// ============================================



// 类名: GetSimilarSongs


/**
 * GetSimilarSongs
desc: 获取与指定歌曲相似的歌曲ID列表。相似度由后端根据曲风、艺术家等多种因素综合计算。
@param userID: String (发起请求的用户的ID，用于身份验证。)
@param userToken: String (用户的认证令牌。)
@param songID: String (作为查询基准的目标歌曲的ID。)
@param limit: Int (希望返回的相似歌曲的最大数量。)
@return (Option[List[String]], String): (相似歌曲的ID列表; 如果找不到源歌曲或无相似歌曲则为None, 错误信息)
 */

case class GetSimilarSongs(
  userID: String,
  userToken: String,
  songID: String,
  limit: Int
) extends API[(Option[List[String]], String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetSongPopularity.scala
// ============================================



// 类名: GetSongPopularity


/**
 * GetSongPopularity
desc: 获取指定歌曲的热度分数。热度是一个正实数，由多种因素（如播放量、评分、分享次数等）在后端综合计算得出。
@param userID: String (发起请求的用户的ID，用于身份验证。)
@param userToken: String (用户的认证令牌。)
@param songID: String (要查询热度的歌曲的ID。)
@return (Option[Double], String): (歌曲的热度值, 错误信息)
 */

case class GetSongPopularity(
  userID: String,
  userToken: String,
  songID: String
) extends API[(Option[Double], String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetSongRate.scala
// ============================================



// 类名: GetSongRate


/**
 * GetSongRate
desc: 查询指定用户对某首歌曲的评分。
@param userID: String (发起请求的用户的ID，用于身份验证。)
@param userToken: String (用户的认证令牌。)
@param targetUserID: String (被查询评分的目标用户ID。)
@param songID: String (被查询评分的歌曲ID。)
@return (Int, String): (用户的评分（1-5），如果未评分则为0；附带操作信息)
 */

case class GetSongRate(
  userID: String,
                        userToken: String,
                        targetUserID: String,
                        songID: String
) extends API[(Int, String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetUserPortrait.scala
// ============================================



// 类名: GetUserPortrait


/**
 * GetUserPortrait
desc: 获取指定用户的用户画像。用户画像由一组(曲风ID, 偏好度)的元组构成，偏好度是一个(0,1)范围内的浮点数，且整个偏好度向量经过归一化处理。
@param userID: String (需要获取画像的目标用户的ID。)
@param userToken: String (用于验证请求者身份的认证令牌。)
@return (Option[Profile], String): (用户画像列表, 错误信息)
 */

case class GetUserPortrait(
  userID: String,
  userToken: String
) extends API[(Option[Profile], String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\GetUserSongRecommendations.scala
// ============================================



// 类名: GetUserSongRecommendations


/**
 * GetUserSongRecommendations
desc: 根据指定用户的用户画像，为其推荐一个歌曲ID列表。使用分页参数来控制返回结果。
@param userID: String (需要获取歌曲推荐的用户的ID。)
@param userToken: String (用户的认证令牌，用于验证身份。)
@param pageNumber: Int (页码，从1开始。默认为1。)
@param pageSize: Int (每页返回的歌曲数量。默认为20。)
@return (Option[List[String]], String): (推荐的歌曲ID列表, 错误信息)
 */

case class GetUserSongRecommendations(
  userID: String,
  userToken: String,
  pageNumber: Int = 1,
  pageSize: Int = 20
) extends API[(Option[List[String]], String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\LogPlayback.scala
// ============================================



// 类名: LogPlayback


/**
 * LogPlayback
desc: 记录一次用户播放歌曲的行为。此记录将用于后续的统计分析（如用户画像生成）。播放时间戳由服务器在接收请求时生成，以确保数据的安全性和一致性。
@param userID: String (发起播放行为的用户的ID。)
@param userToken: String (用户的认证令牌，用于验证权限。)
@param songID: String (被播放的歌曲的ID。)
@return (Boolean, String): (操作是否成功, 错误信息)
 */

case class LogPlayback(
  userID: String,
  userToken: String,
  songID: String
) extends API[(Boolean, String)](StatisticsServiceCode)


// ============================================
// 文件: D:\workspace\DaigakuObjects\Front2Back\MusicDataBase\UltraMDB\PlusUltraMDBCode\StatisticsService\src\main\scala\APIs\StatisticsService\RateSong.scala
// ============================================



// 类名: RateSong


/**
 * RateSong
desc: 记录用户对特定歌曲的评分。服务层将验证评分是否在1-5的有效范围内。如果用户对同一首歌曲重复评分，此操作应覆盖之前的评分。
@param userID: String (评分用户的ID。)
@param userToken: String (用户的认证令牌，用于验证身份。)
@param songID: String (被评分的歌曲的ID。)
@param rating: Int (用户给出的评分。后端服务会验证其值必须在1至5的闭区间内。)
@return (Boolean, String): (操作是否成功, 错误信息)
 */

case class RateSong(
  userID: String,
  userToken: String,
  songID: String,
  rating: Int
) extends API[(Boolean, String)](StatisticsServiceCode)


// ============================================
// 提取完成!
// 共扫描 39 个Scala文件
// 找到 39 个匹配的case class定义
// ============================================


